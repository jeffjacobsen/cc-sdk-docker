services:
  # FastAPI server container
  server:
    container_name: claude-sdk-server
    build:
      context: .
      dockerfile: Dockerfile
    # Tag the built image locally (includes both TypeScript and Python)
    image: ${IMAGE_NAME:-claude-code-sdk:latest}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    environment:
      # Claude Code OAuth Token (set this in .env or export before running)
      - CLAUDE_CODE_OAUTH_TOKEN=${CLAUDE_CODE_OAUTH_TOKEN:-}
      # Anthropic API Key (for direct API access)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      # Legacy session token (fallback)
      - CLAUDE_CODE_SESSION=${CLAUDE_CODE_SESSION:-}
      # Port configuration
      - PORT=${PORT:-3000}
    volumes:
      # Mount current directory for development
      - .:/app
      # Docker volume for persistent Claude CLI authentication
      - claude-auth:/home/claude/.claude
    working_dir: /app
    # Run as root to install packages, then switch to claude user for the server
    user: root
    command: bash -c "pip install -r /app/server/requirements.txt && exec su claude -c 'python /app/server/api.py'"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Telegram bot container
  telegram-bot:
    container_name: claude-telegram-bot
    build:
      context: .
      dockerfile: Dockerfile
    image: ${IMAGE_NAME:-claude-code-sdk:latest}
    environment:
      # Claude Code OAuth Token (required)
      - CLAUDE_CODE_OAUTH_TOKEN=${CLAUDE_CODE_OAUTH_TOKEN:-}
      # Telegram Bot API Key (required)
      - TELEGRAM_BOT_API_KEY=${TELEGRAM_BOT_API_KEY:-}
      # Working directory for file operations (optional)
      - WORKING_DIRECTORY=${TELEGRAM_WORKING_DIRECTORY:-/workspace}
    volumes:
      # Mount current directory for development
      - .:/app
      # Docker volume for persistent Claude CLI authentication
      - claude-auth:/home/claude/.claude
      # Mount workspace for file operations
      - ${TELEGRAM_WORKSPACE:-./workspace}:/workspace
      # Persistent session storage
      - telegram-sessions:/app/telegram_sessions
    working_dir: /app
    user: root
    command: bash -c "pip install -r /app/server/requirements.txt && exec su claude -c 'python /app/server/telegram_bot.py'"
    restart: unless-stopped
    depends_on:
      - server

  # Slack bot container
  slack-bot:
    container_name: claude-slack-bot
    build:
      context: .
      dockerfile: Dockerfile
    image: ${IMAGE_NAME:-claude-code-sdk:latest}
    environment:
      # Claude Code OAuth Token (required)
      - CLAUDE_CODE_OAUTH_TOKEN=${CLAUDE_CODE_OAUTH_TOKEN:-}
      # Slack Bot Token (required)
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN:-}
      # Slack App Token for Socket Mode (required)
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN:-}
      # Working directory for file operations (optional)
      - WORKING_DIRECTORY=${SLACK_WORKING_DIRECTORY:-/workspace}
    volumes:
      # Mount current directory for development
      - .:/app
      # Docker volume for persistent Claude CLI authentication
      - claude-auth:/home/claude/.claude
      # Mount workspace for file operations
      - ${SLACK_WORKSPACE:-./workspace}:/workspace
      # Persistent session storage
      - slack-sessions:/app/slack_sessions
    working_dir: /app
    user: root
    command: bash -c "pip install -r /app/server/requirements.txt && exec su claude -c 'python /app/server/slack_bot.py'"
    restart: unless-stopped
    depends_on:
      - server

volumes:
  claude-auth:
  telegram-sessions:
  slack-sessions:
